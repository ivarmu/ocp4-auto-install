---
- include_vars:
    file: "{{ item }}"
  loop:
    - "vars/configure_tower_general.yml"
    - "vars/configure_tower_vault.yml"
    - "vars/configure_tower_job_templates.yml"
  when: configure_tower_job_templates is not defined

- name: Create tower Job Templates
  ansible.tower.tower_job_template:
    tower_username: "{{ configure_tower_username }}"
    tower_password: "{{ configure_tower_password }}"
    tower_host: "{{ configure_tower_server_url }}"
    validate_certs: "{{ configure_tower_validate_certs }}"
    name: "{{ item.name }}"
    project: "{{ item.project }}"
    playbook: "{{ item.playbook }}"
    job_type: "{{ item.job_type | default('run') }}"
    description: "{{ item.description | default(omit) }}"
    credential: "{{ item.credential | default(omit) }}"
    credentials: "{{ item.credentials | default(omit) }}"
    become_enabled: "{{ item.become_enabled | default('false') }}"
    concurrent_jobs_enabled: "{{ item.concurrent_jobs_enabled | default('false') }}"
    diff_mode_enabled: "{{ item.diff_mode_enabled | default('false') }}"
    extra_vars: "{{ (lookup('file', item.extra_vars_path) | from_yaml) if item.extra_vars_path is defined else omit }}"
    fact_caching_enabled: "{{ item.fact_caching_enabled | default('false') }}"
    force_handlers_enabled: "{{ item.force_handlers_enabled | default('false') }}"
    forks: "{{ item.forks | default(50) }}"
    host_config_key: "{{ item.host_config_key | default(omit) }}"
    inventory: "{{ item.inventory | default(omit) }}"
    job_tags: "{{ item.job_tags | default(omit) }}"
    limit: "{{ item.limit | default(omit) }}"
    skip_tags: "{{ item.skip_tags | default(omit) }}"
    start_at_task: "{{ item.start_at_task | default(omit) }}"
    verbosity: "{{ item.verbosity | default(omit) }}"
    vault_credential: "{{ item.vault_credential | default(omit) }}"
    survey_enabled: "{{ item.survey_enabled | default('false') }}"
    survey_spec: "{{ (lookup('file', item.survey_spec_file) | from_json) if item.survey_spec_file is defined else omit }}"
    state: "{{ item.state | default('present') }}"
  loop: "{{ configure_tower_job_templates }}"
  when: configure_tower_job_templates is defined
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  async: 1000
  poll: 0
  register: jobtemplate1

- name: "Configure Tower Job Templates | Wait for finish the job templates creation"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: jobtemplate1_result
  until: jobtemplate1_result.finished
  retries: 10
  loop: "{{ jobtemplate1.results }}"
  delegate_to: "{{ 'localhost' if tower_local else omit }}"
  #no_log: true

## Credentials will be added collecting IDs first and the throught the Tower API
#- name: Login Against Tower | tower-cli
#  raw: |
#    tower-cli config host "{{ configure_tower_server_url }}" && \
#    tower-cli config verify_ssl false && \
#    tower-cli login "{{ configure_tower_username }}" --password "{{ configure_tower_password }}"
#  delegate_to: "{{ 'localhost' if tower_local else omit }}"
#
#- block:
#  - name: Get job_templates IDs | tower-cli
#    command: |
#      tower-cli job_template get --name "{{ item.name }}" -f id
#    loop: "{{ configure_tower_job_templates }}"
#    register: towercli_job_templates_ids_output
#    when: item.credential is defined
#
#  - name: Get credential- IDs | tower-cli
#    command: |
#      tower-cli credential list --name "{{ item.credential }}" -f id
#    register: towercli_credentials_ids_ouput
#    loop: "{{ configure_tower_job_templates }}"
#    when: item.credential is defined
#  when: configure_tower_job_templates is defined
#  delegate_to: "{{ 'localhost' if tower_local else omit }}"
#
#- block:
#  - debug:
#      msg: "{{ towercli_credentials_ids_ouput }}"
#  - debug:
#      msg: "{{ towercli_job_templates_ids_output }}"
#
## - block:
#- name: Populate credentials IDs dictionary
#  set_fact:
#    credentials_ids_dict: "{{ credentials_ids_dict | default({}) | combine ({item.item.name: {'cred_id': item.stdout }}) }}"
#  with_items: "{{ towercli_credentials_ids_ouput.results }}"
#  when: item.stdout is defined
#
#- name: Populate Job Templates IDs dictionary
#  set_fact:
#    job_templates_ids_dict: "{{ job_templates_ids_dict |default({}) | combine( {item.item.name: {'jt_id': item.stdout }} ) }}"
#  with_items: "{{ towercli_job_templates_ids_output.results }}"
#  when: item.stdout is defined
#
#- name: Merge on a new dictionary Job Templates IDs and credentials IDs
#  set_fact:
#    ids_dict: "{{ credentials_ids_dict | combine (job_templates_ids_dict, recursive=True) }}"
#  when: credentials_ids_dict is defined and job_templates_ids_dict is defined
#
#- debug:
#    msg: "{{ job_templates_ids_dict }}"
#  when: credentials_ids_dict is defined and job_templates_ids_dict is defined
#
#- debug:
#    msg: "{{ credentials_ids_dict }}"
#  when: credentials_ids_dict is defined and job_templates_ids_dict is defined
#
#- debug:
#    msg: "{{ ids_dict }}"
#  when: credentials_ids_dict is defined and job_templates_ids_dict is defined
#
#- name: Associate credential to JobTemplate
#  uri:
#    url: "https://{{ configure_tower_server_url }}/api/v2/job_templates/{{ item.value.jt_id }}/credentials/"
#    user: "{{ configure_tower_username }}"
#    password: "{{ configure_tower_password }}"
#    force_basic_auth: yes
#    method: POST
#    status_code: 204,400
#    body_format: json
#    body: '{[ "id": {{ item.value.cred_id }} ]}'
#    validate_certs: no
#  changed_when: yes
#  loop: "{{ ids_dict | dict2items }}"
#  when: ids_dict is defined and job_templates_ids_dict is defined and credentials_ids_dict is defined
#  delegate_to: "{{ 'localhost' if tower_local else omit }}"
#  when: towercli_credentials_ids_ouput is defined and towercli_job_templates_ids_output is defined
